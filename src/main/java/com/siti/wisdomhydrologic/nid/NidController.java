package com.siti.wisdomhydrologic.nid;

import com.siti.wisdomhydrologic.config.ConstantConfig;
import com.siti.wisdomhydrologic.util.HttpClientUtil;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by dell on 2019/10/26.
 */
@Component
public class NidController {


    @Resource
    NidMapper nidMapper;

    @Resource
    ConstantConfig constantConfig;


    /**
     * 获取写入的NidArray
     */
    public List<Integer> getNidList() {
        List<Integer> NidList = new ArrayList<>();
        String s = "";
        try {
            s = HttpClientUtil.doGet(constantConfig.getNidUrl());

            if (s == null || "".equals(s)) {
                s = HttpClientUtil.doGet(constantConfig.getNidTestUrl());
            }
            if (s == null || "".equals(s)) {
                s = HttpClientUtil.doGet(constantConfig.getNidLocalUrl());
            }

        } catch (Exception e) {
            //第二数据源开放接口未正常启动
            System.out.println("无法获取第二数据源传感器编号");
        } finally {
            if (s != null && !("".equals(s))) {
                s = s.substring(1, s.length() - 1);
                String[] split = s.split(",");
                for (String nid : split) {
                    NidList.add(Integer.parseInt(nid));
                }
            }
            // 当http请求无响应值时,用固定数据源替代
            //if (s == null || "".equals(s)) {
            /**
             * 替换为第二数据源的mysql数据库的模组表数据
             * */
            List<Integer> nid1 = nidMapper.getNid();
            if (nid1.size() == 0) {
                int[] NidArray = {1530183, 1530184, 1530189, 1550181, 1610183, 1610184, 1610189, 1610284, 1610289, 1610384, 1610389, 1610484, 1610489, 1610571, 1610572, 1610583, 1610584, 1610589, 1610684, 1610689, 1610784, 1610789, 1620171, 1620172, 1620183, 1620184, 1620189, 1620271, 1620272, 1620283, 1620289, 1620483, 1620484, 1620489, 1620783, 1620784, 1620789, 1630183, 1630184, 1630189, 1630283, 1630284, 1630289, 1630383, 1630384, 1630389, 1630483, 1630484, 1630489, 1630583, 1630584, 1630589, 1630683, 1630684, 1630689, 1630783, 1630784, 1630789, 1630883, 1630884, 1630889, 1630983, 1630984, 1630989, 1631071, 1631072, 1631083, 1631084, 1631089, 1631271, 1631272, 1631283, 1631284, 1631289, 1631383, 1631384, 1631389, 1631483, 1631484, 1631489, 1631584, 1631589, 1631671, 1631672, 1631683, 1631684, 1631689, 1631771, 1631772, 1631783, 1631784, 1631789, 1631883, 1631884, 1631889, 1640171, 1640172, 1640183, 1640184, 1640185, 1640186, 1640189, 1640283, 1640284, 1640285, 1640286, 1640289, 1650181, 1650189, 1650281, 1650289, 1660181, 1660184, 1660189, 1670281, 1670284, 1670285, 1670286, 1670289, 1670381, 1670385, 1670386, 1670389, 1670481, 1670484, 1670485, 1670486, 1670489, 1680281, 1680285, 1680286, 1680289, 1680871, 1680872, 1680883, 1680889, 1681089, 1685373, 1685384, 1685389, 1685583, 1685589, 1685681, 1685684, 1685689, 1685784, 1685789, 1685884, 1685889, 1685984, 1685989, 1810184, 1810189, 1810284, 1810289, 1830183, 1830184, 1830189, 1830283, 1830284, 1830289, 1830383, 1830384, 1830389, 1830483, 1830484, 1830489, 1830583, 1830584, 1830589, 1830683, 1830684, 1830689, 1830783, 1830784, 1830789, 1830883, 1830884, 1830889, 1830983, 1830984, 1830989, 1831083, 1831084, 1831089, 1831183, 1831184, 1831189, 1831283, 1831284, 1831289, 1831383, 1831384, 1831389, 1831483, 1831484, 1831489, 1831583, 1831584, 1831589, 1831683, 1831684, 1831689, 1831783, 1831784, 1831789, 1831983, 1831984, 1831989, 1832083, 1832084, 1832089, 1832183, 1832184, 1832189, 1832283, 1832284, 1832289, 1832383, 1832384, 1832389, 1832471, 1832472, 1832483, 1832484, 1832489, 1832583, 1832584, 1832589, 1832883, 1832884, 1832889, 1832983, 1832984, 1832989, 1840183, 1840184, 1840185, 1840186, 1840189, 1840271, 1840272, 1840283, 1840284, 1840285, 1840286, 1840383, 1840384, 1840385, 1840386, 1840389, 1840483, 1840484, 1840485, 1840486, 1840489, 1850181, 1850189, 1850281, 1850285, 1850286, 1850289, 1880271, 1880272, 1880283, 1880284, 1880289, 1880371, 1880372, 1880673, 1880675, 1880683, 1880684, 1880685, 1880686, 1880689};
                for (int nid : NidArray) {
                    NidList.add(nid);
                }
                return NidList;
            }
            //若三个接口都无返回数据,获取失败,使用固定Array中的数据
            return nid1;
        }
    }
}